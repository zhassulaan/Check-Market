import { useState, useContext, useEffect } from 'react';
import Head from 'next/head';
import styled from 'styled-components';
import { Context } from '../context/Context';
import SuccessModal from '../components/Modals/SuccessModal';
import BasketModal from '../components/Modals/BasketModal';
import SubscribeModal from '../components/Modals/SubscribeModal';
import Error from './_error';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import ProductItem from '../components/ProductItem';
import Select from '../components/Select';
import Input from '../components/Input';
import Button from '../components/Button';
import styles from '../styles/basket.module.css';

export default function Basket() {
	const { state, dispatch } = useContext(Context);
	const cart = state.cart;

	const [total, setTotal] = useState(0);
	useEffect(() => {
		const totalArray = cart.map(item =>
			(item.quantity * item.product.price)
		)
		setTotal(totalArray.reduce((acc, curr) => acc + Number(curr), 0))
	}, [cart]);

	// SUBSCRIBE AND BASKET MODAL
	const [subscribeModal, setSubscribeModal] = useState(false);
	const [basketModal, setBasketModal] = useState(false);
	const subscribe = async(ev) => {
		ev.preventDefault();
		setSubscribeModal(!subscribeModal);
	}
	const basket = async(ev) => {
		ev.preventDefault();
		setBasketModal(!basketModal);
	}

	const payment_method = [
		{ value: "Наличными", label: "Наличными" },
	 	{ value: "Безналичный расчет", label: "Безналичный расчет" }
	];
	const delivery_method = [
		{ value: "Курьером", label: "Курьером" },
	 	{ value: "Самовывоз", label: "Самовывоз" }
	];
	const region = [
		{ value: "Акмолинская область", label: "Акмолинская область" },
	 	{ value: "Актюбинская область", label: "Актюбинская область" },
		{ value: "Алматинская область", label: "Алматинская область" },
	 	{ value: "Жамбылская область", label: "Жамбылская область" },
		{ value: "Туркестанская область", label: "Туркестанская область" },
	 	{ value: "Актау", label: "Актау" },
		{ value: "Алматы", label: "Алматы" },
	 	{ value: "Атырау", label: "Атырау" },
		{ value: "Байконур", label: "Байконур" },
	 	{ value: "Караганда", label: "Караганда" },
		{ value: "Павлодар", label: "Павлодар" },
	 	{ value: "Петропавловск", label: "Петропавловск" }
	];

	function checkPhoneNumber(str) {
		for (var i = 0; i < str.length; i++) {
			if (str.charAt(i) === '_')
				return true;
		}
		return false;
	};

	const [details, setDetails] = useState({ paymentMethod: null, deliveryMethod: null, city: null, address: "", name: "", surename: "", phone: "", message: "", cart: cart });
	const [error, setError] = useState(false);
	const [successModal, setSuccessModal] = useState(false);

	const handleChange1 = (selectedOption) => {
		setDetails({...details, paymentMethod: selectedOption});
	};
	const handleChange2 = (selectedOption) => {
		setDetails({...details, deliveryMethod: selectedOption});
	};
	const handleChange3 = (selectedOption) => {
		setDetails({...details, city: selectedOption});
	};
	
	const success = async(ev) => {
		ev.preventDefault();
		setSuccessModal(!successModal);
	}
	
	const handleSubmit = e => {
		e.preventDefault();
		if ((details.paymentMethod === null) || (details.deliveryMethod === null) || (details.city === null) || (details.address === "") || (details.name === "") || (details.surename === "") || (details.phone === "") || checkPhoneNumber(details.phone)) {
			setError(true);
		}
		else {
			setError(false);
			dispatch({
				type: "PURCHASE",
				payload: details,
			})
			window.scrollTo({ top: 0 });
			success(e);
		}
	}

	const [checkoutForm, setcheckoutForm] = useState(true);
	const scrolling = () => {
		if (window.scrollY >= 327 && window.innerWidth > 768) {
			setcheckoutForm(true);
		} else {
			setcheckoutForm(false);
		}
	};
	window.addEventListener('scroll', scrolling);

  	return (
	 	<div>
			<Head>
				<title>ЧЕКМАРКЕТ</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png"/>
				<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png"/>
				<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png"/>
				<link rel="manifest" href="/site.webmanifest"/>
				<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5"/>
				<meta name="msapplication-TileColor" content="#da532c"/>
				<meta name="theme-color" content="#ffffff"/>
			</Head>
			
			{ (() => {
				if (successModal)
					return (<>
						<Navbar modal={ basket }/>

						<div className={ styles.logo_container }>
							<div className={ styles.logo_box }>
									<img src="/home/logo.svg" alt="logo" className={ styles.logo }/>
							</div>
						</div>

						{ (window.innerWidth < 993) ?
							<div className={styles.header_container}>
								<div className={styles.header}>
									<h3 className={styles.title}>Услуги</h3>

									<div className={styles.icons}>
										<img src="/modal/rectangle.svg" alt="rectangle" width={15} height={15} layout="fixed"/>
										<img src="/modal/triangle.svg" alt="triangle" width={40} height={15} layout="fixed"/>
										<img src="/modal/ellipse.svg" alt="ellipse" width={15} height={15} layout="fixed"/>
									</div>
								</div>
							</div>
								:
							<></>
						}
						<SuccessModal sender={ 2 } close={ success }/>
						<Footer modal={ subscribe }/>
					</>);

				else if (cart.length === 0)
					return(
						<Error/>
					);

				else if (basketModal)
					return (
						<BasketModal close={ basket }/> 
					);

				else if (subscribeModal)
					return (
						<SubscribeModal modal={ subscribe }/>
					);

				else
					return ( (total >= 10000 || total === 0) ?
						<Wrapper>
							<Navbar modal={ basket }/>

							<div className={ styles.logo_container }>
								<div className={ styles.logo_box }>
										<img src="/home/logo.svg" alt="logo" className={ styles.logo }/>
								</div>
							</div>

							<div className={ styles.container }>
								<div className={ styles.header }>
									<h3 className={ styles.title }>Оформление заказа</h3>

									<div className={ styles.icons }>
										<img src="/modal/rectangle.svg" alt="rectangle" width={15} height={15} layout="fixed"/>
										<img src="/modal/triangle.svg" alt="triangle" width={40} height={15} layout="fixed"/>
										<img src="/modal/ellipse.svg" alt="ellipse" width={15} height={15} layout="fixed"/>
									</div>

									<p className={ styles.subtitle }>Укажите детали Вашего заказа</p>
								</div>

								<div className={ styles.content }>
									<form className={ styles.form } style={ checkoutForm ? { position: 'sticky', top: '6.25rem' } : null } onSubmit={ handleSubmit }>
										<div className={ styles.form_box }>
											<p className={ styles.form_text } style={{ marginBottom: "0.625rem" }}>Способ оплаты:</p>
											<Select 
												placeholderText={ "Выберите способ оплаты" }
												options={ payment_method }
												value={ details.paymentMethod }
												onChange={ handleChange1 }
												className={ error ? styles.error_border : styles.dafault_border }
											/>
										</div>
										
										<div className={ styles.form_box }>
											<p className={ styles.form_text } style={{ marginBottom: "0.625rem" }}>Способ доставки:</p>
											<Select 
												placeholderText={ "Выберите способ доставки" }
												options={ delivery_method }
												value={ details.deliveryMethod }
												onChange={ handleChange2 }
												className={ error ? styles.error_border : styles.dafault_border }
											/>
										</div>	

										<div className={ styles.form_box }>
											<p className={ styles.form_text } style={{ marginBottom: "0.625rem" }}>Адресная информация:</p>
											<Select 
												placeholderText={ "Выберите свой город" }
												options={ region }
												value={ details.city }
												onChange={ handleChange3 }
												className={ error ? styles.error_border : styles.dafault_border }
											/>
											<div className={ [styles.form_input, styles.address].join(" ") }>
												<Input 
													type={ "text" }
													name={ "address" }
													id={ "address" }
													placeholder={ "Адрес " }
													value={ details.address }
													onChange={ e => setDetails({...details, address: e.target.value}) }
													className={ error ? styles.error_border : styles.dafault_border }
												/>	
											</div>
										</div>	

										<div className={ styles.form_box }>
											<p className={ styles.form_text }>Информация о получателе:</p>
											<div className={ styles.form_input }>
												<Input 
													type={ "text" }
													name={ "name" }
													id={ "name" }
													placeholder={ "Имя " }
													value={ details.name }
													onChange={ e => setDetails({...details, name: e.target.value}) }
													className={ error ? styles.error_border : styles.dafault_border }
												/>
											</div>
											<div className={ styles.form_input }>
												<Input 
													type={ "text" }
													name={ "surename" }
													id={ "surename" }
													placeholder={ "Фамилия " }
													value={ details.surename }
													onChange={ e => setDetails({...details, surename: e.target.value}) }
													className={ error ? styles.error_border : styles.dafault_border }
												/>
											</div>
										</div>			
										
										<div className={ styles.form_box }>
											<p className={ styles.form_text }>Телефон:</p>
											<div className={ styles.form_input }>
												<Input 
													type={ "text" }
													name={ "phone" }
													id={ "phone" }
													placeholder={ "+7 (___) ___-__-__" }
													mask={ ['+', '7', ' ', '(', /[1-9]/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, '-', /\d/, /\d/] }
													value={ details.phone }
													onChange={ e => setDetails({...details, phone: e.target.value}) }
													className={ error ? styles.error_border : styles.dafault_border }
												/>
											</div>
										</div>

										<div className={ styles.form_box }>
											<p className={ styles.form_text }>Ваш комментарий:</p>
											<div className='form-textarea'>
												<Input 
													type={ "text" }
													name={ "message" }
													id={ "message" }
													placeholder={ "Опишите Вашу проблему " }
													value={ details.message }
													onChange={ e => setDetails({...details, message: e.target.value}) }
													ta={ true }
													basket={ true }
													className={ styles.dafault_border }
												/>
											</div>
										</div>

										<div className='form_button'>
											<Button text={ "Подтвердить заказ" }/>
										</div>

										<p className={ styles.term_of_use }>Подтверждая заказ вы соглашаетесь с <a href="/term_of_use">пользовательским соглашением</a></p>
									</form>

									<div className={styles.products}>
										{ cart.map(item => 
											<ProductItem product={ item.product } quantity={ item.quantity }/>
										) }

										<h6 className={ styles.total_price }><b>Итоговая сумма:</b> { total } тг.</h6>
									</div>
								</div>
							</div>
							
							<Footer modal={ subscribe }/>
						</Wrapper>
							:
						<Error/>
					);
			})() }
		</div>
  	);
}

const Wrapper = styled.div`
	.form-textarea textarea { 
		height: 9.25rem;
	}

	.form_button {
		height: 4.375rem;
		margin: 1.875rem 0 1.25rem;
	}
	
	.form_button .text {
		font-size: 20px;
		font-weight: 700;
	}

	@media (max-width: 1220px) {
		.form_button {
			height: 3.75rem;
			margin: 1.5625rem 0 0.9375rem;
		}

		.form_button .text {
			font-size: 17px;
		}
	}
	
	@media (max-width: 992px) {
		.form_button {
			height: 3.125rem;
			margin: 1.5625rem 0 0.9375rem;
		}

		.form_button .text {
			font-size: 16px;
		}
	}

	@media (max-width: 768px) {
		.form_button {
			margin: 0;
		}

		.form_button .text {
			font-size: 14px;
		}
	}

	@media (max-width: 650px) {
		.form_button {
			height: 2.5rem;
		}

		.form_button .text {
			font-size: 13px;
		}
	}
`